{"version":3,"sources":["models/WatchModel.jsx","components/AddForm.jsx","components/WatchItem.jsx","components/WatchList.jsx","App.js","serviceWorker.js","index.js"],"names":["WatchModel","city","offset","id","this","AddForm","handleAdd","useState","form","setForm","handleChange","event","target","name","value","prevForm","className","onSubmit","preventDefault","watch","shortid","generate","htmlFor","type","onChange","required","step","min","max","WatchItem","currentUTC","handleDelete","utcOffset","Number","format","onClick","WatchList","watches","map","key","App","loadTime","setInterval","setState","moment","utc","prevState","filter","state","clearInterval","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sUAAqBA,EACnB,WAAYC,EAAMC,EAAQC,GAAK,oBAC7BC,KAAKH,KAAOA,EACZG,KAAKF,OAASA,EACdE,KAAKD,GAAKA,GCyDCE,EAxDC,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,UAAgB,EACTC,mBAAS,CAAEN,KAAM,GAAIC,OAAQ,KADpB,mBAC1BM,EAD0B,KACpBC,EADoB,KAG3BC,EAAe,SAAAC,GAAU,IAAD,EACJA,EAAMC,OAAtBC,EADoB,EACpBA,KAAMC,EADc,EACdA,MACdL,GAAQ,SAAAM,GAAQ,sBAAUA,EAAV,eAAqBF,EAAOC,QAS9C,OACE,0BAAME,UAAU,UAAUC,SAPP,SAAAN,GACnBA,EAAMO,iBACN,IAAMC,EAAQ,IAAInB,EAAWQ,EAAKP,KAAMO,EAAKN,OAAQkB,IAAQC,YAC7Df,EAAUa,GACVV,EAAQ,CAAER,KAAM,GAAIC,OAAQ,OAI1B,yBAAKc,UAAU,cACb,yBAAKA,UAAU,SACb,2BAAOM,QAAQ,QAAf,oDACA,yBAAKN,UAAU,sBACb,2BACEO,KAAK,OACLpB,GAAG,OACHU,KAAK,OACLC,MAAON,EAAKP,KACZuB,SAAUd,EACVe,UAAQ,MAId,yBAAKT,UAAU,SACb,2BAAOM,QAAQ,YAAf,mFACA,2BACEC,KAAK,SACLG,KAAM,EACNC,KAAM,GACNC,IAAK,GACLf,KAAK,SACLV,GAAG,SACHW,MAAON,EAAKN,OACZsB,SAAUd,EACVe,UAAQ,MAId,4BAAQT,UAAU,kBAAkBO,KAAK,UAAzC,sDCrBSM,EA1BG,SAAC,GAAyC,IAAvCV,EAAsC,EAAtCA,MAAOW,EAA+B,EAA/BA,WAAYC,EAAmB,EAAnBA,aACtC,OACE,yBAAKf,UAAU,qBACb,yBAAKA,UAAU,cACb,2BACE,2BAAIG,EAAMlB,OAEZ,2BAAI6B,EAAWE,UAAUC,OAAOd,EAAMjB,SAASgC,OAAO,aACtD,4BAAQC,QAAS,kBAAMJ,EAAaZ,EAAMhB,MACxC,uBAAGa,UAAU,uBCqBRoB,EA7BG,SAAC,GAA2C,IAAzCC,EAAwC,EAAxCA,QAASP,EAA+B,EAA/BA,WAAYC,EAAmB,EAAnBA,aACxC,OACE,yBAAKf,UAAU,oBACb,yBAAKA,UAAU,WACZqB,EAAQC,KAAI,SAAAnB,GAAK,OAChB,kBAAC,EAAD,CACEoB,IAAKpB,EAAMhB,GACXgB,MAAOA,EACPW,WAAYA,EACZC,aAAcA,UC+CXS,G,wDArDb,aAAe,IAAD,8BACZ,gBAYFC,SAAW,WACTC,aAAY,WACV,EAAKC,SAAS,CACZb,WAAYc,MAASC,UAEtB,MAlBS,EAqBdvC,UAAY,SAAAa,GACV,EAAKwB,UAAS,SAAAG,GAAS,MAAK,CAC1BT,QAAQ,GAAD,mBAAMS,EAAUT,SAAhB,CAAyBlB,SAvBtB,EA2BdY,aAAe,SAAA5B,GACb,EAAKwC,UAAS,SAAAG,GAAS,MAAK,CAC1BT,QAASS,EAAUT,QAAQU,QAAO,SAAA5B,GAAK,OAAIA,EAAMhB,KAAOA,UA1B1D,EAAK6C,MAAQ,CACXX,QAAS,GACTP,WAAY,MALF,E,gEAUZ1B,KAAKqC,a,6CAwBLQ,cAAc7C,KAAKqC,Y,+BAInB,OACE,yBAAKzB,UAAU,OACb,yBAAKA,UAAU,wBACb,kBAAC,EAAD,CAASV,UAAWF,KAAKE,YACzB,kBAAC,EAAD,CACE+B,QAASjC,KAAK4C,MAAMX,QACpBP,WAAY1B,KAAK4C,MAAMlB,WACvBC,aAAc3B,KAAK2B,qB,GA9CbmB,cCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.4f3a65ae.chunk.js","sourcesContent":["export default class WatchModel {\n  constructor(city, offset, id) {\n    this.city = city;\n    this.offset = offset;\n    this.id = id;\n  }\n}\n","import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport shortid from \"shortid\";\nimport WatchModel from \"../models/WatchModel\";\n\nconst AddForm = ({ handleAdd }) => {\n  const [form, setForm] = useState({ city: \"\", offset: \"\" });\n\n  const handleChange = event => {\n    const { name, value } = event.target;\n    setForm(prevForm => ({ ...prevForm, [name]: value }));\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    const watch = new WatchModel(form.city, form.offset, shortid.generate());\n    handleAdd(watch);\n    setForm({ city: \"\", offset: \"\" });\n  };\n  return (\n    <form className=\"ui form\" onSubmit={handleSubmit}>\n      <div className=\"two fields\">\n        <div className=\"field\">\n          <label htmlFor=\"city\">Название</label>\n          <div className=\"ui input left icon\">\n            <input\n              type=\"text\"\n              id=\"city\"\n              name=\"city\"\n              value={form.city}\n              onChange={handleChange}\n              required\n            />\n          </div>\n        </div>\n        <div className=\"field\">\n          <label htmlFor=\"distance\">Временная зона</label>\n          <input\n            type=\"number\"\n            step={1}\n            min={-12}\n            max={+14}\n            name=\"offset\"\n            id=\"offset\"\n            value={form.offset}\n            onChange={handleChange}\n            required\n          />\n        </div>\n      </div>\n      <button className=\"ui green button\" type=\"submit\">\n        Добавить\n      </button>\n    </form>\n  );\n};\n\nAddForm.propTypes = {\n  handleAdd: PropTypes.func.isRequired\n};\n\nexport default AddForm;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst WatchItem = ({ watch, currentUTC, handleDelete }) => {\n  return (\n    <div className=\"eight wide column\">\n      <div className=\"ui segment\">\n        <p>\n          <b>{watch.city}</b>\n        </p>\n        <p>{currentUTC.utcOffset(Number(watch.offset)).format(\"kk:mm:ss\")}</p>\n        <button onClick={() => handleDelete(watch.id)}>\n          <i className=\"times red icon\"></i>\n        </button>\n      </div>\n    </div>\n  );\n};\n\nWatchItem.propTypes = {\n  watch: PropTypes.shape({\n    city: PropTypes.string.isRequired,\n    offset: PropTypes.string.isRequired,\n    id: PropTypes.string.isRequired\n  }),\n  currentUTC: PropTypes.object,\n  handleDelete: PropTypes.func.isRequired\n};\n\nexport default WatchItem;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport WatchItem from \"./WatchItem\";\n\nconst WatchList = ({ watches, currentUTC, handleDelete }) => {\n  return (\n    <div className=\"ui basic segment\">\n      <div className=\"ui grid\">\n        {watches.map(watch => (\n          <WatchItem\n            key={watch.id}\n            watch={watch}\n            currentUTC={currentUTC}\n            handleDelete={handleDelete}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nWatchList.propTypes = {\n  watches: PropTypes.arrayOf(\n    PropTypes.shape({\n      city: PropTypes.string.isRequired,\n      offset: PropTypes.string.isRequired,\n      id: PropTypes.string.isRequired\n    })\n  ).isRequired,\n  currentUTC: PropTypes.object,\n  handleDelete: PropTypes.func.isRequired\n};\n\nexport default WatchList;\n","import React, { Component } from \"react\";\nimport moment from \"moment\";\nimport AddForm from \"./components/AddForm\";\nimport WatchList from \"./components/WatchList\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      watches: [],\n      currentUTC: null\n    };\n  }\n\n  componentDidMount() {\n    this.loadTime();\n  }\n\n  loadTime = () => {\n    setInterval(() => {\n      this.setState({\n        currentUTC: moment().utc()\n      });\n    }, 1000);\n  };\n\n  handleAdd = watch => {\n    this.setState(prevState => ({\n      watches: [...prevState.watches, watch]\n    }));\n  };\n\n  handleDelete = id => {\n    this.setState(prevState => ({\n      watches: prevState.watches.filter(watch => watch.id !== id)\n    }));\n  };\n\n  componentWillUnmount() {\n    clearInterval(this.loadTime);\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"ui container segment\">\n          <AddForm handleAdd={this.handleAdd} />\n          <WatchList\n            watches={this.state.watches}\n            currentUTC={this.state.currentUTC}\n            handleDelete={this.handleDelete}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}